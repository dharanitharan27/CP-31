#include<bits/stdc++.h>
using namespace std;
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		int n,k,x;
		cin>>n>>k>>x;
		if(x!=1)
		{
			cout<<"YES"<<endl<<n<<endl;
			for(int i=0;i<n;i++)
			{
				cout<<1<<" ";
			}
			cout<<endl;
		}
		else if(k==1 || (k==2 && n%2==1))
		{
			cout<<"NO"<<endl;
		}
		else{
			cout<<"YES"<<endl<<n/2<<endl;
			cout<<(n%2 == 1 ? 3:2)<<" ";
			for(int i=1;i<n/2;i++){
				cout<<2<<" ";
			}
			cout<<endl;
		}

	}
}
Note
   The problem is about considering the least amount of cases possible. I propose the following options.

        If x≠1, then you can always print n ones. So the answer is YES.
        If k=1, then no integer is available, so the answer is NO.
        If k=2, then only 2  is available, so you can only collect even n . So if it's odd, the answer is NO.

        Otherwise, you can always collect n  with the following construction: if n  is even then take 2 , otherwise take 3. 
Then take ⌊n2⌋−1  twos. You can see that an even n  only uses twos, so it fits the previous check. If it's odd,
then k  is at least 3 , so 3  is allowed to take.
