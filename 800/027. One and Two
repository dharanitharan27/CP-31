#include <bits/stdc++.h>
using namespace std;

int findSmallestK(const vector<int>& a) {
    int n = a.size();
    int totalTwos = 0;
    for (int i = 0; i < n; ++i) {
        if (a[i] == 2) {
            totalTwos++;
        }
    }

    int leftTwos = 0; 
    for (int i = 0; i < n - 1; ++i) {
        if (a[i] == 2) {
            leftTwos++;
        }
        int rightTwos = totalTwos - leftTwos; 
        if (leftTwos == rightTwos) {
            return i + 1; 
        }
    }

    return -1;
}
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n; 
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            cin >> a[i];
        }
        cout << findSmallestK(a) << "\n";
    }
}
Note
   Counting the Total Number of 2s
        The code first counts how many times the number 2 appears in the array a (totalTwos).
   Finding the Smallest Index k
        It iterates through the array while maintaining a count of 2s on the left (leftTwos).
        The remaining 2s on the right are computed as rightTwos = totalTwos - leftTwos.
        If leftTwos equals rightTwos, it returns i + 1 (1-based index of the split point).
   Return -1 if No Valid k Exists
        If no such index is found where leftTwos == rightTwos, it returns -1.
